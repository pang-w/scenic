<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 凭证匹配器，做登录次数验证，和密码匹配验证 -->
	<bean id="credentialsMatcher"
		class="com.lovecws.mumu.common.security.shiro.credentials.RetryLimitHashedCredentialsMatcher">
		<!-- 登录次数放入缓存 -->
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
		<property name="keyPrefix" value="${loginRetryLimit}"/>
	</bean>

	<!-- 自定义的user Realm实现 -->
	<bean id="userRealm" class="com.lovecws.mumu.common.security.shiro.realm.UserRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="cachingEnabled" value="true" />
		<property name="authorizationCachingEnabled" value="true"/>
		<property name="authorizationCacheName" value="${permissions}"/>
	</bean>

	<!-- 自定义redisManager-redis -->
	<bean id="redisCacheManager" class="com.lovecws.mumu.common.security.shiro.session.RedisCacheManager">
		<property name="jedisClient" ref="jedisClient" />
	</bean>

	<bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="SHAREJSESSIONID" />
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/" />
		<property name="httpOnly" value="true" />
	</bean>
	<!-- session会话存储的实现类 -->
	<bean id="redisShiroSessionDAO" class="com.lovecws.mumu.common.security.shiro.session.RedisSessionDAO">
		<property name="jedisClient" ref="jedisClient" />
		<!---session缓存前缀-->
		<property name="keyPrefix" value="${session}"/>
		<!---session缓存时间（单位秒）-->
		<property name="expire" value="1800"/>
	</bean>
	<!-- session管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间，默认30分钟(1800000) -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话验证器调度时间 -->
		<property name="sessionValidationInterval" value="1800000" />
		<!-- session存储的实现 -->
		<property name="sessionDAO" ref="redisShiroSessionDAO" />
		<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionIdCookie" ref="sharesession" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
	</bean>

	<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- rememberMe是cookie的名字 -->
		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间30天 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<!-- <property name="cacheManager" ref="shiroEhcacheManager"></property> -->
		<property name="cacheManager" ref="redisCacheManager" />
		<!-- sessionManager -->
		<property name="sessionManager" ref="sessionManager" />
		<!--rememberMeManager -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- 记住我拦截器 -->
	<bean id="RememberAuthenticationFilter" class="com.lovecws.mumu.common.security.shiro.filter.RememberAuthenticationFilter" />
	<!-- 用户权限拦截器 -->
	<bean id="UserPermissionsAuthorizationFilter"
		class="com.lovecws.mumu.common.security.shiro.filter.UserPermissionsAuthorizationFilter" />
	<!-- 基于Form表单的身份验证过滤器，为了控制验证码 -->
	<bean id="authcFilter" class="com.lovecws.mumu.common.security.shiro.filter.RcFormAuthenticationFilter">
		<!-- from表达提交参数的属性命名 -->
		<property name="usernameParam" value="userName" />
		<property name="passwordParam" value="userPassword" />
		<property name="rememberMeParam" value="rememberMe" />
		<property name="loginUrl" value="/manager/login" />
		<property name="failureKeyAttribute" value="shiroLoginFailure" />
	</bean>
	<!-- 验证码验证过滤器 -->
	<bean id="rcCaptchaValidateFilter" class="com.lovecws.mumu.common.security.shiro.filter.RcCaptchaValidateFilter">
		<property name="captchaEbabled" value="true" />
		<property name="captchaParam" value="captchaCode" />
		<property name="failureKeyAttribute" value="shiroLoginFailure" />
	</bean>
	<!-- 注销拦截器 -->
	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/manager" />
	</bean>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- 登录controller的mapper地址 -->
		<property name="loginUrl" value="/manager" />
		<property name="successUrl" value="/manager/main" />
		<property name="unauthorizedUrl" value="/manager" />
		<property name="filters">
			<util:map>
				<entry key="authc" value-ref="authcFilter" />
				<entry key="rcCaptchaValidate" value-ref="rcCaptchaValidateFilter" />
				<entry key="perms" value-ref="UserPermissionsAuthorizationFilter" />
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				<!-- Shiro的Web过滤器 -->
				/manager/=anon
				/manager/password=anon
				/manager/login=authc
				/manager/logout = logout
				/manager/**=authc
				/**=anon
			</value>
		</property>
	</bean>

	<aop:config proxy-target-class="true"></aop:config>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>